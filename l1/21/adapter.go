// Паттерн "Адаптер"
// Применимость:
// - Когда нужно использовать существующий класс, но его интерфейс не соответствует требованиям
// - Когда нужно интегрировать сторонние библиотеки с несовместимыми интерфейсами
// - Когда нужно обеспечить работу нескольких классов с разными интерфейсами
// Плюсы:
// + Отделяет и скрывает от клиента преобразование интерфейсов
// + Позволяет повторно использовать существующий код
// + Реализует принцип открытости/закрытости
// Минусы:
// - Усложняет код за счет дополнительных классов
// - Может снижать производительность из-за дополнительного уровня косвенности
// Реальные примеры использования:
// - Адаптеры для работы с разными базами данных
// - Обертка для устаревшего API в микросервисной архитектуре
// - Интеграция платежных систем с разными интерфейсами (см. пример ниже)
// - Адаптеры для устройств (USB-адаптеры, сетевые адаптеры в программном обеспечении)
// - Работа с разными форматами данных (JSON/XML/CSV)

package main

import "fmt"

// OldProvider представляет старую платежную систему с устаревшим интерфейсом
type OldProvider struct{}

// MakePayment - метод старой системы с неудобным интерфейсом
// Принимает три параметра: amount (int), currency (string)
func (oldP *OldProvider) MakePayment(amount int, currency string) {
	fmt.Printf("Payment: %d %s\n", amount, currency)
}

// ProviderAdapter - адаптер, преобразующий старый интерфейс в новый
type ProviderAdapter struct {
	old      *OldProvider // встроенный экземпляр старой системы
	currency string       // валюта (фиксируется при создании адаптера)
}

// NewProviderAdapter - конструктор адаптера
// Позволяет зафиксировать валюту при создании
func NewProviderAdapter(currency string) *ProviderAdapter {
	return &ProviderAdapter{
		old:      &OldProvider{},
		currency: currency,
	}
}

// Pay - новый упрощённый интерфейс, который ожидает клиент
// Принимает только amount (int), остальные параметры берутся из адаптера
func (newP *ProviderAdapter) Pay(amount int) {
	newP.old.MakePayment(amount, newP.currency)
}

func main() {
	// Создаем адаптер, фиксируя валюту
	adapter := NewProviderAdapter("RUB")

	// Вызываем новый упрощенный интерфейс с одним параметром
	adapter.Pay(200)
}
