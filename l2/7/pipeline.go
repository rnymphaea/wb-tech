package main

import (
	"fmt"
	"math/rand"
	"time"
)

func asChan(vs ...int) <-chan int {
	c := make(chan int)
	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
		close(c)
	}()
	return c
}

func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v, ok := <-a:
				if ok {
					c <- v
				} else {
					a = nil
				}
			case v, ok := <-b:
				if ok {
					c <- v
				} else {
					b = nil
				}
			}
			if a == nil && b == nil {
				close(c)
				return
			}
		}
	}()
	return c
}

func main() {
	rand.Seed(time.Now().Unix())
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Print(v)
	}
}

// Вывод:
// 12346578 (12345768, 12354687)
//
// Объяснение:
// Сначала создаются 2 канала с использованием функции asChan() и вызывается анонимная горутина, которая записывает переданные аргументы в созданный канал, а после закрывает его.
// В функции merge() начинается цикл до тех пор пока оба канала не закрыты. Если канал не закрыт, то в результирующий канал записывается значение из него,
// в ином случае указываем, что канал = nil.
// Когда оказывается так, что оба канала = nil, тогда закрывается результирующий канал и происходит возврат из функции.
// Главная горутина читает значения из результирующего канала, который возвращает функция merge(), до тех пор, пока он не закрыт.
// Различные выводы получаются из-за использония рандомной задержки отправки данных в каналы a и b.
// Важно, что каналы после записи в них закрываются и происходит корректное выполнение программы (не случается дедлоков)
